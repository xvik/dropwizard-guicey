plugins {
    id 'ru.vyarus.github-info' version '1.5.0' apply false
    id 'ru.vyarus.quality' version '4.9.0' apply false
    id 'org.cyclonedx.bom' version '1.7.4' apply false
    id 'ru.vyarus.mkdocs' version '3.0.0' apply false

    id 'jacoco'
    id 'java-platform'
    id 'ru.vyarus.java-lib' version '2.4.0'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.github.ben-manes.versions' version '0.49.0'
}

wrapper {
    gradleVersion = '8.3'
}

description = 'Dropwizard guice integration'

ext {
    dropwizard = '4.0.3'
    guice = '7.0.0'
    hk2 = '3.0.4'
    spockJunit5 = '1.2.0'
    guiceExtAnn = '2.0.1'
    guiceValidator = '3.0.2'
}

// root project is a BOM
dependencies {
    // dropwizard BOM must go first to let maven select correct guava
    api platform("io.dropwizard:dropwizard-dependencies:$dropwizard")
    api platform("com.google.inject:guice-bom:$guice")

    constraints {
        api "com.google.inject:guice:$guice"
        api "org.glassfish.hk2:guice-bridge:$hk2"
        api "ru.vyarus:spock-junit5:$spockJunit5"

        api "ru.vyarus:guice-ext-annotations:$guiceExtAnn"
        api "ru.vyarus:guice-validator:$guiceValidator"

        // add subprojects to BOM
        project.subprojects.each { api it }
    }
}

javaLib {
    // aggregated test and coverage reports
    aggregateReports()
    // publish root BOM as custom artifact
    bom {
        artifactId = 'guicey-bom'
        description = 'Guicey BOM'
    }
}

pom {
    delegate.properties {
        'guice.version' guice
        'dropwizard.version' dropwizard
        'hk2.version' hk2
        'guice-ext-annotations.version' guiceExtAnn
    }
}

// maven publication related configuration applied to all projects
allprojects {
    apply plugin: 'project-report'
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'signing'

    repositories { mavenLocal(); mavenCentral(); maven { url 'https://jitpack.io' } }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    group = 'ru.vyarus.guicey'

    github {
        user = 'xvik'
        license = 'MIT'
        repository = 'dropwizard-guicey'
    }

    // delay required because java plugin is activated only in subprojects and without it
    // pom closure would reference root project only
    afterEvaluate {
        pom {
            developers {
                developer {
                    id 'xvik'
                    name 'Vyacheslav Rusakov'
                    email 'vyarus@gmail.com'
                }
            }
        }
    }

    // don't publish gradle metadata artifact
    javaLib.withoutGradleMetadata()

    // skip signing for jitpack (snapshots)
    tasks.withType(Sign) {onlyIf { !System.getenv('JITPACK') }}
}

// all sub-modules are normal java modules, using root BOM (like maven)
subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.cyclonedx.bom'

    java {
        sourceCompatibility = 11
    }

    dependencies {
        implementation platform(project(':'))

        compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.0'
        compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    }

    if (project.name != 'dropwizard-guicey') {
        // extra modules use different group
        group = 'ru.vyarus.guicey'

        // common dependencies for all modules except core
        dependencies {
            implementation project(':dropwizard-guicey')

            testImplementation 'io.dropwizard:dropwizard-testing'
        }

        javaLib {
            // java 9 auto module name
            autoModuleName = "$group.${project.name.replace('guicey', 'ru.vyarus.dropwizard.guicey').replace('-', '.')}"
            // use only direct dependencies in the generated pom, removing BOM mentions
            pom.removeDependencyManagement()
        }
    }

    test {
//        useJUnitPlatform()
        testLogging {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
        maxHeapSize = '512m'
    }

    dependencyUpdates.revision = 'release'

    if (!project.name.startsWith('guicey-test-')) {
        test {
            useJUnitPlatform()
        }
        dependencies {
            testImplementation 'ru.vyarus:spock-junit5'
            testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
            testImplementation 'org.junit.jupiter:junit-jupiter-api'
        }
    } else {
        // don't compile and run tests for legacy junit4 and spock1 modules
        tasks.withType(GroovyCompile)
                .configureEach {it.onlyIf {JavaVersion.current() <= JavaVersion.VERSION_11} }
        test.onlyIf { JavaVersion.current() <= JavaVersion.VERSION_11 }
    }

    // SBOM
    cyclonedxBom {
        includeConfigs = ["runtimeClasspath"]
        destination = file("build/reports")
        outputName = "bom"
        outputFormat = "all"
    }
    publishing.publications.maven {
        artifact(file('build/reports/bom.json')) {
            classifier = 'cyclonedx'
            builtBy cyclonedxBom
        }
        artifact(file('build/reports/bom.xml')) {
            classifier = 'cyclonedx'
            builtBy cyclonedxBom
        }
    }
}

// dependency on all subprojects required for release validation
check.dependsOn subprojects.check

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

// Required signing properties for release: signing.keyId, signing.password and signing.secretKeyRingFile
// (https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials)

release.git.requireBranch.set('master')

// release manages only root project (subprojects will be checked and released implicitly)
afterReleaseBuild {
    dependsOn 'publishToSonatype'
    dependsOn subprojects.collect {":$it.name:publishToSonatype" }
    dependsOn 'closeAndReleaseSonatypeStagingRepository'
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

